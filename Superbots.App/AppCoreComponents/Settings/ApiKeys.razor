@page "/apikeysettings"
@using Superbots.App.Common.Models;

<MudContainer Class="d-flex flex-grow-1" Fixed="true" Style="padding: 1rem;">
    <MudPaper Class="d-flex flex-grow-1 flex-column" Elevation="0">
        <MudTextField T="string" @bind-Text="@ApiKey.Name" Label="Nome" Variant="Variant.Filled" />
        <MudTextField T="string" @bind-Text="@ApiKey.Description" Label="Descrizione" Variant="Variant.Filled" />
        <MudTextField T="string" @bind-Text="@ApiKey.Key" Label="Api Key" Variant="Variant.Filled" />
        <MudButton OnClick="SaveSettings" Variant="Variant.Filled" Color="Color.Surface">Save</MudButton>
    </MudPaper>
</MudContainer>


@code
{
    [Inject] public IAppSettingsService? AppSettingsService { get; set; }

    private string KeyValue { get; set; } = string.Empty;
    private ApiKey ApiKey { get; set; } = new ApiKey();

    protected override async Task OnInitializedAsync()
    {
        var settings = await AppSettingsService!.LoadCurrentSettings();
        if (settings is not null)
        {
            ApiKey = settings.ApiKeys?.FirstOrDefault() ?? new ApiKey();
        }
    }


    private async Task SaveSettings()
    {
        var settings = await AppSettingsService!.LoadCurrentSettings();
        if (settings is null)
        {
            var settingsId = await AppSettingsService!.CreateSettings();
            settings = await AppSettingsService!.LoadCurrentSettings();
        }

        settings!.ApiKeys ??= new List<ApiKey>();

        if (settings.ApiKeys.Any())
        {
            settings.ApiKeys.First().Name = ApiKey.Name;
            settings.ApiKeys.First().Description = ApiKey.Description;
            settings.ApiKeys.First().Key = ApiKey.Key;
        }
        else
        {
            settings.ApiKeys.Add(ApiKey);
        }

        await AppSettingsService!.UpdateSettings(settings);
        KeyValue = string.Empty;
    }
}